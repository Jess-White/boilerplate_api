#!/usr/bin/env ruby

# frozen_string_literal: true

# This script is a way to setup or update your development environment
# automatically. This script is idempotent, so that you can run it at anytime
# and get an expectable outcome. Add necessary setup steps to this file.

require 'fileutils'
require 'securerandom'

def setup
  unless File.exist?('.env')
    log "Copying environment config files"
    FileUtils.cp '.env.sample', '.env'
    log "Copied .env.sample to .env\n"

    log "Generating SECRET_KEY_BASE for .env"
    secret = SecureRandom.hex(64)
    env_file = File.read(".env")
    env_file_with_secret = env_file.gsub(/SECRET_KEY_BASE=.+/, "SECRET_KEY_BASE=\"#{secret}\"")
    File.open(".env", "w") { |file| file.puts env_file_with_secret }
    log "Generated SECRET_KEY_BASE for .env"
    log "IMPORTANT: Please set DATABASE_URL and DATABASE_TEST_URL based on your environment\n"
  end

  log "Installing gems"
  # Only do bundle install if the much-faster bundle check indicates we need to
  system! "gem install bundler --conservative"
  system! "bundle check || bundle install"
  log "Gems installed\n"

  log "Ensuring binstubs are created"
  system! "bundle binstubs --force rubocop rspec-core guard"
  log "Binstubs created\n"

  log "Removing old logs and tempfiles"
  system! 'bin/rails log:clear tmp:clear'
  log "Temp files removed\n"

  log "Dropping & recreating the development database"
  # Note that the very first time this runs, db:reset will fail, but this
  # failure is fixed by doing a db:migrate
  system! "bin/rails db:reset || bin/rails db:migrate"
  log "Development database recreated\n"

  log "Dropping & recreating the test database"
  # Setting the RAILS_ENV explicitly to be sure we actually reset the test
  # database
  system!({ "RAILS_ENV" => "test" }, "bin/rails db:reset")
  log "Test database recreated\n"

  log "All set up."
  log ""
  log "To see commonly-needed commands, run:"
  log ""
  log "    bin/setup help"
  log ""
end

def help
  log "Useful commands:"
  log ""
  log "  bin/run"
  log "     # run app locally"
  log ""
  log "  bin/ci"
  log "     # runs all tests and checks as CI would"
  log ""
  log "  bin/rubocop"
  log "     # run linter"
  log ""
  log "  bin/rspec"
  log "     # run unit tests"
  log ""
  log "  bin/guard"
  log "     # run unit tests in watch mode"
  log ""
  log "  bin/setup help"
  log "     # show this help message"
  log ""
end

# start of helpers

# It's helpful to know what messages come from this script, so we'll use log
# instead of `puts`
def log(message)
  puts "[ bin/setup ] #{message}"
  puts if message.end_with?("\n")
end

# We don't want the setup method to have to do all this error checking, and we
# also want to explicitly log what we are executing. Thus, we use this method
# instead of Kernel#system
def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

# end of helpers

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

FileUtils.chdir APP_ROOT do
  if ARGV[0] == "help"
    help
  else
    setup
  end
end
